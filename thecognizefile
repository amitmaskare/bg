<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator; // Corrected import
use App\Models\{User,Blog,Askquestion,Mcq,Multiplequestion,Contact};
use Illuminate\Support\Facades\Hash; // Corrected import
use Auth;
use DB;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;
class ApiController extends Controller
{


    public function register(Request $request)
    {
        
        $validator = Validator::make($request->all(), [ 
            'name'              => 'required',
            'email' => 'required|string|email|unique:users',
            'password'          => 'required|min:8',
            'confirmPassword'  => 'required|same:password', 
        ]);

        if($validator->fails())
        {
            $response=[
                'success'=>false,
                'message'=>$validator->errors()
            ];
            return response()->json($response,400);
        }
        $input=$request->all();
        $input['password']=Hash::make($input['password']);
        $user=User::create($input);
        $success['token']=$user->createToken('MyApp')->plainTextToken;
        $success['name']=$input['name'];
        $response=[
            'success'=>true,
            'message'=>'User Register Successfully',
            'data'=>$success,
        ];
        return response()->json($response,200);
    }

    public function login(Request $request)
    {

        $validator = Validator::make($request->all(), [ 
            'email'             => 'required',
            'password'          => 'required',
        ]);
        if($validator->fails())
        {
            $response=[
                'success'=>false,
                'message'=>$validator->errors()
            ];
            return response()->json($response,400);
        }
        if(Auth::attempt(['email'=>$request->email,'password'=>$request->password]))
        {
            $user = Auth::user();

//$success['token']=$user->createToken('MyApp')->plainTextToken;

            $success['name']=$user->name;
            $success['email']=$user->email;
            $success['userId']=$user->userId;
            $response=[
                'success'=>true,
                'message'=>'Login Successfully',
                'data'=>$success,
            ];
            return response()->json($response,200);
        }
        else{
            $response=[
                'success'=>false,
                'message'=>'Email and password Incorrect',
                'data'=>'',
            ];
            return response()->json($response,400);
        }
    }

    function addBlog(Request $request)
    {

        $validator = Validator::make($request->all(), [ 
            'userId'=>'required',
            'title'=>'required',
            'description'     => 'required',
            'image' => 'required|image|mimes:jpeg,png,jpg,gif|max:2048', 
            'keyword'  => 'required', 
        ]);

        if($validator->fails())
        {
            $response=[
                'success'=>false,
                'message'=>$validator->errors(),
            ];
            return response()->json($response,400);
        }
        if ($request->hasFile('image')) {

            $src = $_FILES['image']['tmp_name'];
            $filEnc = time();
            $avatar= rand(0000,9999)."-".$_FILES['image']['name'];
            $avatar1 = str_replace(array( '(', ')',' '), '', $avatar);

            $dest =public_path().'/uploads/blog/'.$avatar1;

            if(move_uploaded_file($src,$dest))
            {
                $image  = $avatar1;             
            }
        }
        else
        {
            $image  ="";
        }

        $input=$request->all();
        $data=array(
            'user_id'=>$input['userId'],
            'title'=>$input['title'],
            'blog'=>$input['description'],
            'keywords'=>$input['keyword'],
            'image'=>$image,
            'slug_url'=>\Str::slug($input['title']),
            'created_date'=>now(),
        );
        DB::table('blogs')->insert($data);
        $response=[
            'success'=>true,
            'message'=>'Added Blog Successfully',
        ];
        return response()->json($response,200);   
    }

    public function blogList(Request $request)
    {

        $blogList = Blog::OrderBy('id','DESC')->take(20)->get();

        if (!$blogList->isEmpty()) {
            $array = [];
            foreach($blogList as $key) {

                $title = mb_convert_encoding(strip_tags($key->title), 'UTF-8', 'auto');
                $title = mb_strlen($title) > 30 ? mb_substr($title, 0, 30) . '...' : $title;

                $desc = mb_convert_encoding($key->blog, 'UTF-8', 'auto');
                $desc = html_entity_decode($desc, ENT_QUOTES, 'UTF-8');
                $description = mb_strlen(strip_tags($desc)) > 95 ? mb_substr(strip_tags($desc), 0, 95) . '...' : strip_tags($desc);

                if (!empty($key->image) && file_exists(public_path('uploads/blog/' . $key->image))) {
                    $image = asset('uploads/blog/' . $key->image);
                } else {
                    $image = '';
                }

                $array[] = [
                    'blogId'      => $key->id,
                    'userId'      => $key->user_id,
                    'title'       => $title,
                    'description' => $description,
                    'image'       => $image,
                    'slugUrl'       => $key->slug_url,
                    'created'     => date('M d Y', strtotime($key->created_date)),
                ];
            }

            return response()->json([
                'success' => true,
                'message' => 'Fetch record successfully',
                'data'    => $array,
            ], 200);
        } else {

            return response()->json([
                'success' => false,
                'message' => 'No Data Found',
                'data'    => [],
            ], 200);
        }
    }


    public function blogDetail(Request $request)
    {
        $validator = Validator::make($request->all(), [ 
            'blogId'              => 'required',
        ]);
        if($validator->fails())
        {
            $response=[
                'success'=>false,
                'message'=>$validator->errors()
            ];
            return response()->json($response,400);
        }
        $input=$request->all();
        $blogId = $input['blogId'];
        $blogData=Blog::where('id',$blogId)->first();
        if(!empty($blogData))
        {
            if(!empty($blogData->image) && file_exists(public_path('uploads/blog/'.$blogData->image)))
            {
                $success['image']=asset('uploads/blog/'.$blogData->image);
            }
            else{
                $success['image']='';
            }
            $d1=strip_tags($blogData->blog);
            $d1 = preg_replace('/[^A-Za-z0-9\s]/', '', $d1);
            $success['blogId']=$blogData->id;
            $success['userId']=$blogData->user_id;
            $success['title']=$blogData->title;
            $success['description']=$d1;
            $success['keywords']=$blogData->keywords;
            $success['created']=date('M d Y',strtotime($blogData->created_date));
            $response=[
                'success'=>true,
                'message'=>'Blog Data Successfully',
                'data'=>$success,
            ];
            return response()->json($response,200);
        }
        else{
            $response=[
                'success'=>false,
                'message'=>'No Data Found',
                'data'=>NULL,
            ];
            return response()->json($response,200);
        }
    }

    function addAskQuestion(Request $request)
    {
        $validator = Validator::make($request->all(), [ 
            'userId'      => 'required',
            'categoryId'      => 'required',
            'title' => 'required',
            'description'     => 'required',
            'keyword'  => 'required', 
            'image' => 'nullable|image|mimes:jpeg,jpg,png|max:2048',
        ]);

        if($validator->fails())
        {
            $response=[
                'success'=>false,
                'message'=>$validator->errors()
            ];
            return response()->json($response,400);
        }
        $image='';
        if ($request->hasFile('image')) {

            $src = $_FILES['image']['tmp_name'];
            $filEnc = time();
            $avatar= rand(0000,9999)."-".$_FILES['image']['name'];
            $avatar1 = str_replace(array( '(', ')',' '), '', $avatar);

            $dest =public_path().'/uploads/askquestion/'.$avatar1;

            if(move_uploaded_file($src,$dest))
            {
                $image.= $avatar1;             
            }
        }
        else
        {
            $image.="";
        }

        $input=$request->all();
        $data=array(
            'userId'=>$input['userId'],
            'categoryId'=>$input['categoryId'],
            'title'=>$input['title'],
            'description'=>$input['description'],
            'keyword'=>$input['keyword'],
            'image'=>$image,
            'slug_url'=>\Str::slug($input['title']),
            'status'=>'Active',
            'created'=>now(),
        );
        DB::table('askquestions')->insert($data);
        $response=[
            'success'=>true,
            'message'=>'Added Ask Question Successfully',
        ];
        return response()->json($response,200);   
    }

    function questionList()
    {
        $questionList=Askquestion::OrderBy('id','DESC')->get();
        if (!$questionList->isEmpty()) 
        {
            $array = array();
            foreach($questionList as $key)
            {

                $description = (strlen(strip_tags($key->description)) > 200) ? substr(strip_tags($key->description), 0, 200) . '...': strip_tags($key->description);

                if(!empty($key->image) && file_exists(public_path('uploads/askquestion/'.$key->image)))
                {
                    $image=asset('uploads/askquestion/'.$key->image);
                }
                else{
                    $image='';
                }
                $array[] = [
                    'questionId'   => $key->id,
                    'categoryId'       => $key->categoryId,
                    'title'       => ucfirst($key->title),
                    'description' => ucfirst($description),
                    'image' => $image,
                    'slugUrl' => $key->slug_url,
                    'created' => date('M d Y', strtotime($key->created)),
                ];
            }
            $response=[
                'success'=>true,
                'message'=>'Fetch record successfully',
                'data'=>$array,
            ];
            return response()->json($response,200);
        }
        else{
            $response=[
                'success'=>false,
                'message'=>'No Data Found',
                'data'=>NULL,
            ];
            return response()->json($response,200);  
        } 
    }

    public function questionDetail(Request $request)
    {
        $validator = Validator::make($request->all(), [ 
            'questionId'              => 'required',
        ]);
        if($validator->fails())
        {
            $response=[
                'success'=>false,
                'message'=>$validator->errors()
            ];
            return response()->json($response,400);
        }

        $input=$request->all();
        $questionId = $input['questionId'];

        $questionData=Askquestion::where('id',$questionId)->first();

        if(!empty($questionData))
        {
            if(!empty($questionData->image) && file_exists(public_path('uploads/askquestion/'.$questionData->image)))
            {
                $success['image']=asset('uploads/askquestion/'.$questionData->image);
            }
            else{
                $success['image']='';
            }
            $success['questionId']=$questionData->id;
            $success['categoryId']=$questionData->categoryId;
            $success['title']=ucfirst($questionData->title);
            $success['description']=ucfirst($questionData->description);
            $success['keywords']=$questionData->keywords;
            $success['created']=date('M d Y',strtotime($questionData->created));
            $response=[
                'success'=>true,
                'message'=>'Question Detail Data Successfully',
                'data'=>$success,
            ];
            return response()->json($response,200);
        }
        else{
            $response=[
                'success'=>false,
                'message'=>'No Data Found',
                'data'=>NULL,
            ];
            return response()->json($response,400);
        }
    }

    function replyAnswer(Request $request)
    {
        $validator = Validator::make($request->all(), [ 
            'questionId'              => 'required',
        ]);
        if($validator->fails())
        {
            $response=[
                'success'=>false,
                'message'=>$validator->errors()->first()
            ];
            return response()->json($response,400);
        }

        $input=$request->all();
        $questionId = $input['questionId'];
        $getData=DB::table('user_answer as ans')->leftJoin('askquestions as question','question.id','=','ans.question_id')->leftJoin('users','users.userId','=','ans.user_id')->select('ans.*','question.title','users.name')->where('ans.question_id',$questionId)->get();
        
         $array = [];
        if($getData)
        {
           
            foreach($getData as $key)
            {
                $d1=strip_tags($key->description);
                $d1 = preg_replace('/[^A-Za-z0-9\s]/', '', $d1);
                $array[] = [
                    'answerId'  => $key->id,
                    'name'  =>!empty($key->name)?ucwords($key->name):'Admin',
                    'title'  => ucfirst($key->title),
                    'description' =>$d1,
                    'created' =>date('M d Y',strtotime($key->created)),
                ];
            }
            $response=[
                'success'=>true,
                'message'=>'Data fetched successfully',
                'data'=>$array,
            ];
            return response()->json($response,200);
        }
        else{
            $response=[
                'success'=>false,
                'message'=>'No Data Found',
                'data'=>NULL,
            ];
            return response()->json($response,200);
        }
    } 


    function mcqQuestionTopicList()
    {
        $mcqQuestionList=Mcq::OrderBy('id','DESC')->get();
        if (!$mcqQuestionList->isEmpty()) 
        {
            $array = [];
            foreach($mcqQuestionList as $key)
            {

                $array[] = [
                    'mcqQuestionId'  => $key->id,
                    'slugUrl'  => $key->slug_url,
                    'title'    =>ucwords($key->title),

                ];
            }
            $response=[
                'success'=>true,
                'message'=>'Fetch record successfully',
                'data'=>$array,
            ];
            return response()->json($response,200);
        }
        else{
            $response=[
                'success'=>false,
                'message'=>'No Data Found',
                'data'=>NULL,
            ];
            return response()->json($response,200);  
        } 
    }  

    function mcqQuestionList(Request $request,$id)
    {
        $mcqQuestionList=Mcq::where('slug_url',$request->id)->first();

        if(!empty($mcqQuestionList))
        {
            $getData=Multiplequestion::where('mcq_id',$mcqQuestionList->id)->get();
            if(!$getData->isEmpty())
            {
                $array=[];
                foreach($getData as $key)
                {
                    $array[] = [
                        'id'  => $key->id,
                        'slugUrl'  => $key->slug_url,
                        'question'     =>ucwords($key->question),
                        'type'     =>$key->type,
                        'A'     =>$key->A,
                        'B'     =>$key->B,
                        'C'     =>$key->C,
                        'D'     =>$key->D,
                        'answer'     =>$key->answer,

                    ];
                }

            }
            $success['mcqId']=$mcqQuestionList->id;
            $success['title']=ucwords($mcqQuestionList->title);
            $response=[
                'success'=>true,
                'message'=>'MCQ Data Successfully',
                'data'=>$success,
                'mcqQuestionList'=>$array,
            ];
            return response()->json($response,200);
        }
        else{
            $response=[
                'success'=>false,
                'message'=>'No Data Found',
                'data'=>NULL,
                'mcqQuestionList'=>NULL,
            ];
            return response()->json($response,200);
        }
    }

function mcqAnswer(Request $request)
{
    $validator = Validator::make($request->all(), [ 
        'mcqTestId' => 'required|integer',
        'questionId' => 'required|array',
        'questionId.*' => 'required|integer',
        'type.*' => 'required|string|in:radio,checkbox',
        'answer.*' => 'nullable|string',
        'checkAnswer.*' => 'nullable|array',
        'checkAnswer.*.*' => 'nullable|string',
        'correctAnswer.*' => 'required|string',
    ]);
    
    if ($validator->fails()) {
        $response = [
            'success' => false,
            'message' => $validator->errors()
        ];
        return response()->json($response, 400);
    }
    
    $data = [];
    $questionIds = $request->input('questionId');
    $types = $request->input('type');
    $answers = $request->input('answer');
    $checkAnswers = $request->input('checkAnswer');
    $correctAnswers = $request->input('correctAnswer');
    $mcqTestIds = $request->input('mcqTestId');

    foreach ($questionIds as $key => $value) {
        $answer = '';
        $check_answer = '';

        if (isset($types[$key])) {
            if ($types[$key] == 'radio' && isset($answers[$key])) {
                $answer = $answers[$key];
            } elseif ($types[$key] == 'checkbox' && isset($checkAnswers[$key]) && is_array($checkAnswers[$key])) {
                $check_answer = implode(',', $checkAnswers[$key]);
            }
        }

        // Only add data if there's either an answer or check_answer
        if ($answer || $check_answer) {
            $data[] = [
                'question_id' => $value,
                'answer' => $answer,
                'check_answer' => $check_answer,
                'correct_answer' => $correctAnswers[$key],
                'type' => $types[$key],
            ];
        }
    }

    if (empty($data)) {
        return response()->json([
            'success' => false,
            'message' => 'No valid answers provided'
        ], 400);
    }

    // Serialize data before saving to DB
    $data_serilize = serialize($data);

    // Insert the data into the database
    $dataInsert = [
        'user_id' => 2,  // Assuming you have a logged-in user
        'question_answer' => $data_serilize,
        'mcq_test_id' => $mcqTestIds,  // Ensure this is passed correctly as a single value
        'created_date' => now(),
    ];

    $lastId = DB::table('mcq_answer')->insertGetId($dataInsert);

    $success['mcqAnswerId'] = $lastId;
    $response = [
        'success' => true,
        'message' => 'Data Saved Successfully',
        'data' => $success,
    ];

    return response()->json($response, 200);
}


    function finalResult(Request $request)
    {
        $validator = Validator::make($request->all(), [ 
            'userId'=>'required',
            'mcqAnswerId'     => 'required',
        ]);

        if($validator->fails())
        {
            $response=[
                'success'=>false,
                'message'=>$validator->errors(),
            ];
            return response()->json($response,400);
        }
        $input=$request->all();
        $mcqAnswerList=DB::table('mcq_answer')->where('id',$input['mcqAnswerId'])->where('user_id',2)->OrderBy('id','DESC')->first();
// dd($mcqAnswerList);
        $success['totalQuestion']=DB::table('multiplequestions')->where('mcq_id',@$mcqAnswerList->mcq_test_id)->count();
        $serializedAnswers=unserialize($mcqAnswerList->question_answer);
        $correct_answer=0;
        $wrong_answer=0;

        if (is_array($serializedAnswers) && count($serializedAnswers) > 0) 
        {

            foreach($serializedAnswers as $key)
            {
                if($key['type']=='radio'){

                    if($key['answer']==$key['correct_answer'])
                    {
                        $correct_answer++;
                    }
                    else{
                        $wrong_answer++;
                    }
                }
                else if($key['type']=='checkbox')
                {

                    if($key['check_answer']==$key['correct_answer'])
                    {
                        $correct_answer++;
                    }
                    else{
                        $wrong_answer++;
                    }

                }

            }
            $success['correctAnswer']=$correct_answer;
            $success['wrongAnswer']=$wrong_answer;
            $success['attemptQuestion']=count($serializedAnswers);

            $response=[
                'success'=>true,
                'message'=>'Fetch record successfully',
                'data'=>$success,
            ];
            return response()->json($response,200);
        }
        else{
            $response=[
                'success'=>false,
                'message'=>'No Data Found',
                'data'=>NULL,
            ];
            return response()->json($response,200);  
        } 


    }

    function saveContact(Request $request)
    {
        $validator = Validator::make($request->all(), [ 
            'name'=>'required',
            'email'     => 'required|email',
            'phone' => 'required|min:10|max:10', 
            'subject'  => 'required', 
        ]);

        if($validator->fails())
        {
            $response=[
                'success'=>false,
                'message'=>$validator->errors(),
            ];
            return response()->json($response,400);
        }

        $input=$request->all();
        $data=array(
            'name'=>$input['name'],
            'email'=>$input['email'],
            'phone'=>$input['phone'],
            'subject'=>$input['subject'],
            'message'=>$input['message'],
            'created'=>now(),
        );
        DB::table('contactus')->insert($data);
        $response=[
            'success'=>true,
            'message'=>'Send Data Successfully',
        ];
        return response()->json($response,200);   
    }

}
